{"ast":null,"code":"import _slicedToArray from\"/Users/hardikkhare/zotdrive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import ReactDOM from\"react-dom\";import{faFileUpload}from\"@fortawesome/free-solid-svg-icons\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{useAuth}from\"../../contexts/AuthContext\";import{storage,database}from\"../../firebase\";import{ROOT_FOLDER}from\"../../hooks/useFolder\";import{v4 as uuidV4}from\"uuid\";import{ProgressBar,Toast}from\"react-bootstrap\";export default function AddFileButton(_ref){var currentFolder=_ref.currentFolder;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),uploadingFiles=_useState2[0],setUploadingFiles=_useState2[1];var _useAuth=useAuth(),currentUser=_useAuth.currentUser;function handleUpload(e){var file=e.target.files[0];if(currentFolder==null||file==null)return;/*const id = uuidV4()\n    setUploadingFiles(prevUploadingFiles => [\n      ...prevUploadingFiles,\n      { id: id, name: file.name, progress: 0, error: false },\n    ])*/var filePath=currentFolder===ROOT_FOLDER?\"\".concat(currentFolder.path.join(\"/\"),\"/\").concat(file.name):\"\".concat(currentFolder.path.join(\"/\"),\"/\").concat(currentFolder.name,\"/\").concat(file.name);var uploadTask=storage.ref(\"/files/\".concat(currentUser.uid,\"/\").concat(filePath)).put(file);/*uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.map(uploadFile => {\n            if (uploadFile.id === id) {\n              return { ...uploadFile, progress: progress }\n            }\n\n            return uploadFile\n          })\n        })\n      },\n      () => {\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.map(uploadFile => {\n            if (uploadFile.id === id) {\n              return { ...uploadFile, error: true }\n            }\n            return uploadFile\n          })\n        })\n      },\n      () => {\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.filter(uploadFile => {\n            return uploadFile.id !== id\n          })\n        })\n\n        uploadTask.snapshot.ref.getDownloadURL().then(url => {\n          database.files\n            .where(\"name\", \"==\", file.name)\n            .where(\"userId\", \"==\", currentUser.uid)\n            .where(\"folderId\", \"==\", currentFolder.id)\n            .get()\n            .then(existingFiles => {\n              const existingFile = existingFiles.docs[0]\n              if (existingFile) {\n                existingFile.ref.update({ url: url })\n              } else {\n                database.files.add({\n                  url: url,\n                  name: file.name,\n                  createdAt: database.getCurrentTimestamp(),\n                  folderId: currentFolder.id,\n                  userId: currentUser.uid,\n                })\n              }\n            })\n        })\n      }\n    )*/}return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"label\",{className:\"btn btn-outline-success btn-sm m-0 mr-2\"},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faFileUpload}),/*#__PURE__*/React.createElement(\"input\",{type:\"file\",onChange:handleUpload,style:{opacity:0,position:\"absolute\",left:\"-9999px\"}})),uploadingFiles.length>0&&ReactDOM.createPortal(/*#__PURE__*/React.createElement(\"div\",{style:{position:\"absolute\",bottom:\"1rem\",right:\"1rem\",maxWidth:\"250px\"}},uploadingFiles.map(function(file){return/*#__PURE__*/React.createElement(Toast,{key:file.id,onClose:function onClose(){setUploadingFiles(function(prevUploadingFiles){return prevUploadingFiles.filter(function(uploadFile){return uploadFile.id!==file.id;});});}},/*#__PURE__*/React.createElement(Toast.Header,{closeButton:file.error,className:\"text-truncate w-100 d-block\"},file.name),/*#__PURE__*/React.createElement(Toast.Body,null,/*#__PURE__*/React.createElement(ProgressBar,{animated:!file.error,variant:file.error?\"danger\":\"primary\",now:file.error?100:file.progress*100,label:file.error?\"Error\":\"\".concat(Math.round(file.progress*100),\"%\")})));})),document.body));}","map":{"version":3,"sources":["/Users/hardikkhare/zotdrive/src/components/google-drive/AddFileButton.js"],"names":["React","useState","ReactDOM","faFileUpload","FontAwesomeIcon","useAuth","storage","database","ROOT_FOLDER","v4","uuidV4","ProgressBar","Toast","AddFileButton","currentFolder","uploadingFiles","setUploadingFiles","currentUser","handleUpload","e","file","target","files","filePath","path","join","name","uploadTask","ref","uid","put","opacity","position","left","length","createPortal","bottom","right","maxWidth","map","id","prevUploadingFiles","filter","uploadFile","error","progress","Math","round","document","body"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { faFileUpload } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useAuth } from \"../../contexts/AuthContext\"\nimport { storage, database } from \"../../firebase\"\nimport { ROOT_FOLDER } from \"../../hooks/useFolder\"\nimport { v4 as uuidV4 } from \"uuid\"\nimport { ProgressBar, Toast } from \"react-bootstrap\"\n\nexport default function AddFileButton({ currentFolder }) {\n  const [uploadingFiles, setUploadingFiles] = useState([])\n  const { currentUser } = useAuth()\n\n  function handleUpload(e) {\n    const file = e.target.files[0]\n    if (currentFolder == null || file == null) return\n\n    /*const id = uuidV4()\n    setUploadingFiles(prevUploadingFiles => [\n      ...prevUploadingFiles,\n      { id: id, name: file.name, progress: 0, error: false },\n    ])*/\n\n    const filePath =\n      currentFolder === ROOT_FOLDER\n        ? `${currentFolder.path.join(\"/\")}/${file.name}`\n        : `${currentFolder.path.join(\"/\")}/${currentFolder.name}/${file.name}`\n\n    const uploadTask = storage\n      .ref(`/files/${currentUser.uid}/${filePath}`)\n      .put(file)\n\n    /*uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.map(uploadFile => {\n            if (uploadFile.id === id) {\n              return { ...uploadFile, progress: progress }\n            }\n\n            return uploadFile\n          })\n        })\n      },\n      () => {\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.map(uploadFile => {\n            if (uploadFile.id === id) {\n              return { ...uploadFile, error: true }\n            }\n            return uploadFile\n          })\n        })\n      },\n      () => {\n        setUploadingFiles(prevUploadingFiles => {\n          return prevUploadingFiles.filter(uploadFile => {\n            return uploadFile.id !== id\n          })\n        })\n\n        uploadTask.snapshot.ref.getDownloadURL().then(url => {\n          database.files\n            .where(\"name\", \"==\", file.name)\n            .where(\"userId\", \"==\", currentUser.uid)\n            .where(\"folderId\", \"==\", currentFolder.id)\n            .get()\n            .then(existingFiles => {\n              const existingFile = existingFiles.docs[0]\n              if (existingFile) {\n                existingFile.ref.update({ url: url })\n              } else {\n                database.files.add({\n                  url: url,\n                  name: file.name,\n                  createdAt: database.getCurrentTimestamp(),\n                  folderId: currentFolder.id,\n                  userId: currentUser.uid,\n                })\n              }\n            })\n        })\n      }\n    )*/\n  }\n\n  return (\n    <>\n      <label className=\"btn btn-outline-success btn-sm m-0 mr-2\">\n        <FontAwesomeIcon icon={faFileUpload} />\n        <input\n          type=\"file\"\n          onChange={handleUpload}\n          style={{ opacity: 0, position: \"absolute\", left: \"-9999px\" }}\n        />\n      </label>\n      {uploadingFiles.length > 0 &&\n        ReactDOM.createPortal(\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"1rem\",\n              right: \"1rem\",\n              maxWidth: \"250px\",\n            }}\n          >\n            {uploadingFiles.map(file => (\n              <Toast\n                key={file.id}\n                onClose={() => {\n                  setUploadingFiles(prevUploadingFiles => {\n                    return prevUploadingFiles.filter(uploadFile => {\n                      return uploadFile.id !== file.id\n                    })\n                  })\n                }}\n              >\n                <Toast.Header\n                  closeButton={file.error}\n                  className=\"text-truncate w-100 d-block\"\n                >\n                  {file.name}\n                </Toast.Header>\n                <Toast.Body>\n                  <ProgressBar\n                    animated={!file.error}\n                    variant={file.error ? \"danger\" : \"primary\"}\n                    now={file.error ? 100 : file.progress * 100}\n                    label={\n                      file.error\n                        ? \"Error\"\n                        : `${Math.round(file.progress * 100)}%`\n                    }\n                  />\n                </Toast.Body>\n              </Toast>\n            ))}\n          </div>,\n          document.body\n        )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}